@using OnlineQuiz.BLL.Dtos.Attempts
@model List<QuesstionDto>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>QuizTech</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <style>
        :root {
            --primary-color: #391560;
            --primary: #F0F3F8;
            --secondary: #391560;
            --tertiary: #b12166;
            --action: #f77f00;
            --navbg: rgba(255, 255, 255, 1);
            --fontcolor: black;
            --tcolor: rgba(17, 24, 39, 1);
            --headingcolor: rgb(7, 10, 17);
        }

        body {
            background-color: var(--primary);
            color: var(--fontcolor);
            font-family: Arial, sans-serif;
        }

        .quiz-container {
            background-color: white;
            border-radius: 15px;
            overflow: hidden;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        }

        .quiz-header {
            background-color: var(--secondary);
            color: white;
            padding: 20px;
        }

        .quiz-body {
            padding: 30px;
        }

        .btn-option {
            background-color: var(--primary);
            color: var(--secondary);
            border: none;
            transition: all 0.3s ease;
        }

            .btn-option:hover,
            .btn-option:focus {
                background-color: var(--secondary);
                color: white;
            }

            .btn-option.selected {
                background-color: var(--tertiary);
                color: white;
            }

        .btn-action {
            background-color: var(--action);
            color: white;
            border: none;
        }

            .btn-action:hover,
            .btn-action:focus {
                background-color: var(--tertiary);
            }

        .progress {
            height: 10px;
            margin-bottom: 20px;
        }

        .progress-bar {
            background-color: var(--tertiary);
        }

        #timer {
            font-size: 1.5rem;
            font-weight: bold;
            color: var(--action);
            text-align: center;
            margin-bottom: 15px;
        }

        .center-submit-btn {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8">
                <div class="quiz-container">
                    <div class="quiz-header">
                        <h1 class="text-center mb-3">@ViewData["QuizTitle"]</h1>
                        <div id="timer">Time Left: @ViewData["Time"]</div>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <h2 id="question-number" class="text-center">Question 1 of @Model.Count</h2>
                    </div>
                    <form id="quiz-form" asp-action="SaveChanges" asp-controller="Student" asp-route-attemptid="@Model.First().attemptid" method="post">
                        <input type="hidden" name="attemptid" value="@ViewBag.attemptid" />

                        @for (int i = 0; i < Model.Count; i++)
                        {
                            <div class="question-container" id="question-@i" data-question-id="@Model[i].Id" style="display: @(i == 0 ? "block" : "none")">
                                <h3 class="mb-4">@Model[i].Tittle</h3>

                                <!-- Hidden input for QuestionId -->
                                <input type="hidden" name="answers[@i].QuestionId" value="@Model[i].Id" />

                                <div class="options d-grid gap-3">
                                    @foreach (var option in Model[i].options)
                                    {
                                        <div class="options-container">
                                            <div class="form-check">
                                                <input type="radio" class="form-check-input"
                                                       id="option-@Model[i].Id-@option.Text"
                                                       name="answers[@i].SubmittedAnswer"
                                                       value="@option.Text"
                                                       onclick="selectOption(@Model[i].Id, '@option.Text', this)" />
                                                <label class="form-check-label btn btn-option btn-lg" for="option-@Model[i].Id-@option.Text">
                                                    @option.Text
                                                </label>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }

                        <!-- Navigation Buttons -->
                        <div class="quiz-footer p-4 bg-light d-flex justify-content-between">
                            <button type="button" id="prev-btn" class="btn btn-action" onclick="moveToPreviousQuestion()" disabled>Previous</button>
                            <button type="button" id="next-btn" class="btn btn-action" onclick="moveToNextQuestion()">Next</button>
                        </div>

                        <!-- Centered Submit Button -->
                        <div class="center-submit-btn">
                            <button type="submit" id="submit-btn" class="btn btn-action" onclick="submitQuiz()">Submit</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>

    <script>
        let currentQuestion = 0;
        const userAnswers = {};
        let timeLeft = @ViewData["Time"] * 60; // Time in seconds
        const totalQuestions = @Model.Count;
        const progressBar = document.querySelector('.progress-bar');

        function selectOption(questionId, optionText, radio) {
            userAnswers[questionId] = [optionText];

            document.querySelectorAll(`.question-container[data-question-id="${questionId}"] .btn-option`).forEach(label => {
                const input = label.previousElementSibling; // Get the radio input
                if (input.checked) {
                    label.classList.add('selected');
                } else {
                    label.classList.remove('selected');
                }
            });
        }

        function moveToNextQuestion() {
            if (currentQuestion < totalQuestions - 1) {
                saveAnswer();
                currentQuestion++;
                loadQuestion();
            }
        }

        function moveToPreviousQuestion() {
            if (currentQuestion > 0) {
                saveAnswer();
                currentQuestion--;
                loadQuestion();
            }
        }

        function loadQuestion() {
            document.querySelectorAll('.question-container').forEach((q, index) => {
                q.style.display = index === currentQuestion ? 'block' : 'none';
            });
            document.getElementById('question-number').innerText = `Question ${currentQuestion + 1} of ${totalQuestions}`;
            document.getElementById('prev-btn').disabled = currentQuestion === 0;
        }

        function saveAnswer() {
            const questionId = document.querySelector(`.question-container[data-question-id]:not([style*="display: none"])`).getAttribute('data-question-id');
            const answer = userAnswers[questionId];

            if (answer) {
                console.log(`Saving answer for question ${questionId}: ${answer}`);
            } else {
                console.warn(`No answer selected for question ${questionId}`);
            }
        }

        function submitQuiz() {
            console.log("Submitting quiz with answers:", userAnswers);
        }

        setInterval(() => {
            if (timeLeft <= 0) {
                submitQuiz();
                return;
            }
            timeLeft--;
            document.getElementById('timer').innerText = `Time Left: ${Math.floor(timeLeft / 60)}:${('0' + (timeLeft % 60)).slice(-2)}`;
            const percentage = ((@ViewData["Time"] * 60 - timeLeft) / (@ViewData["Time"] * 60)) * 100;
            progressBar.style.width = `${percentage}%`;
        }, 1000);

        loadQuestion(); // Initialize first question
    </script>
</body>
</html>
